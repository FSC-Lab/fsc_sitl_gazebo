#!/usr/bin/env python

from argparse import ArgumentParser
from functools import partial
from copy import deepcopy

import numpy as np
import rospy
from geometry_msgs.msg import Point, PointStamped, Vector3, Vector3Stamped
from nav_msgs.msg import Odometry

from utils.msg_conversions import array_to_components, components_to_array
from utils.rotation import quaternion_rotate_point

ODOM_STRUCT_INIT = {
    "position": np.zeros((3,), dtype=float),
    "orientation": np.array([0.0, 0.0, 0.0, 1.0]),
    "linear_velocity": np.zeros((3,), dtype=float),
    "angular_velocity": np.zeros((3,), dtype=float),
}


def main():
    rospy.init_node("ground_truth_relative")
    parser = ArgumentParser("demux_odom")
    parser.add_argument("parent", type=str, help="Topic of ground truth of parent body")
    parser.add_argument("child", type=str, help="Topic of ground truth of child body")
    parser.add_argument(
        "out", type=str, help="Base topic to publish relative position/velocity data on"
    )
    args = parser.parse_args()

    def store_odom(msg, body):
        body["position"][:] = components_to_array(msg.pose.pose.position)
        body["orientation"][:] = components_to_array(msg.pose.pose.orientation)
        body["linear_velocity"][:] = components_to_array(msg.twist.twist.linear)
        body["angular_velocity"][:] = components_to_array(msg.twist.twist.angular)

    parent = deepcopy(ODOM_STRUCT_INIT)
    child = deepcopy(ODOM_STRUCT_INIT)

    sub_parent = rospy.Subscriber(
        args.parent, Odometry, partial(store_odom, body=parent), queue_size=1
    )
    sub_child = rospy.Subscriber(
        args.child, Odometry, partial(store_odom, body=child), queue_size=1
    )

    pub_relative_position = rospy.Publisher(
        "{}/position".format(args.out), PointStamped, queue_size=1
    )

    pub_relative_velocity = rospy.Publisher(
        "{}/velocity".format(args.out), Vector3Stamped, queue_size=1
    )

    position_diff = np.empty((3,), dtype=float)

    def main_loop(event):
        parent_orientation = parent["orientation"]
        position_diff[:] = child["position"] - parent["position"]
        relative_pos = quaternion_rotate_point(parent_orientation, position_diff)
        pld = PointStamped()
        pld.header.stamp = event.current_real
        pld.point = array_to_components(relative_pos, Point)
        pub_relative_position.publish(pld)

        velocity_diff = child["linear_velocity"] - parent["linear_velocity"]
        relative_vel = quaternion_rotate_point(parent_orientation, velocity_diff)
        pld = Vector3Stamped()
        pld.header.stamp = event.current_real
        pld.vector = array_to_components(relative_vel, Vector3)
        pub_relative_velocity.publish(pld)

    duration = rospy.Duration(nsecs=33333333)
    rospy.Timer(duration, main_loop)
    rospy.spin()

    sub_parent.unregister()
    sub_child.unregister()


if __name__ == "__main__":
    main()
